def has_tag?(name)
  tags.exists?(name: name)
end

def internal?
  has_tag?("Internal")
end

accepts_nested_attributes_for :tags,
allow_destroy: true,
##accepts_nested_attributes_for :tags,
:reject_if => proc { |attributes|
attributes['tag_name'].blank? }

#@related_articles = Article
#  .joins(:taggings)
  #.where('articles.id != ?', @article.id)
  #.where(taggables: { tag_id: @article.tag_ids })

def self.tagged_with(name)
  Tag.find_by_name!(name).articles
end
def self.tag_counts
  Tag.select("tags.*, count(taggables.tag_id) as count").
    joins(:taggables).group("taggables.tag_id")
end

def tag_list
  tags.map(&:name).join(", ")
  self.tags.collect do |tag|
    tag.name
  end.join(", ")
end
def tag_list=(names)
  self.tags = names.split(",").map do |n|
    Tag.where(name: n.strip).first_or_create!
  end
end
def tag_list=(tags_string)
  tag_names = tags_string.split(",").
  collect{|s| s.strip.downcase}.uniq
  new_or_found_tags = tag_names.collect {
    |name| Tag.find_or_create_by(name: name) }
  self.tags = new_or_found_tags
end

def all_tags=(names)
  self.tags = names.split(",").map do |name|
    Tag.where(name: name.strip).first_or_create!
  end
end
def all_tags
  self.tags.map(&:name).join(", ")
end

def self.tagged_with(name)
  Tag.find_by_name!(name).posts
end
